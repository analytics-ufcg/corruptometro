contratos = read.csv("contratos.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="Latin1")
# ADITIVOS
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
set_features$dt_Ano <- with(set_features, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(set_features, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = sum(quantidadeAditivoPorGestao))
set_features = unique(set_features)
# Dispenças de Licitações
dispencaLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 6 | tp_Licitacao == 7)
dispencaLicitacaoPorGestao = group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = length(cd_UGestora))
dispencaLicitacaoPorGestao <- select(dispencaLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeDispencaLicitacaoPorGestao)
dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
dispencaLicitacaoPorGestao$dt_Ano <- with(dispencaLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
dispencaLicitacaoPorGestao <- group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = sum(quantidadeDispencaLicitacaoPorGestao))
dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
set_features <- merge(set_features, dispencaLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
set_features[is.na(set_features)] <- 0
# Convite de Licitações
conviteLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 3)
conviteLicitacaoPorGestao = group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = length(cd_UGestora))
conviteLicitacaoPorGestao <- select(conviteLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeConviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao <- group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = sum(quantidadeConviteLicitacaoPorGestao))
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = na.omit(conviteLicitacaoPorGestao)
set_features <- merge(set_features, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
set_features[is.na(set_features)] <- 0
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
# Exportar csv
write.csv(set_features, file = "set_features.csv")
write.csv(quantidadeEleitores, file = "quantidadeEleitores.csv")
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
set_features <- read.csv('set_features.csv')
quantidadeEleitores <- read.csv('quantidadeEleitores.csv')
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangência"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
##s
tre_sagres <- unique(tre_sagres)
write.table(tre_sagres, "tre_sagres_unificado.csv", quote = F, row.names = F, sep=",")
data = read.csv("tre_sagres_unificado.csv",header=FALSE,skip=1)
features = select(data, V6,V7,V8,V9)
table(data$V5)
train_idx = createDataPartition(y=data$V5, p=.9,list=FALSE)
train = data[train_idx,]
test = data[-train_idx,]
features = select(train, V6,V7,V8,V9)
prop.table(table(train$V5))
prop.table(table(test$V5))
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$V5)
model = train(x=features,y=labels,trControl=fitControl)
prob = predict
plot(model)
test_labels = as.factor(test$V5)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
View(set_features)
# ----------- Bibliotecas INICIO
# Para gráficos
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
#Para manipulação dos dados
if(!require(dplyr)){
install.packages("dplyr")
}
library(dplyr)
# Utilizada para criar as partições de treino e teste
if(!require(caret)){
install.packages("caret")
}
library(caret)
# Aprendizado de Máquina
if(!require(mlbench)){
install.packages("mlbench")
}
library(mlbench)
# Árvore de decisão
if(!require(C50)){
install.packages("C50")
}
library(C50)
# Random - Floresta de Classificação
if(!require(randomForest)){
install.packages("randomForest")
}
library(randomForest)
# ----------- Bibliotecas  FIM
# Endereço da pasta com dados
setwd('/Corruptometro/data/')
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
tre_sagres_jul <- read.csv('TRE_Sagres_Resp_Eleito.csv')
tre_sagres_n_jul <- read.csv('TRE_Sagres_Eleit_Idon.csv')
tre_sagres_jul$class <- "Julgados"
tre_sagres_n_jul$class <- "Não julgados"
tre_sagres_jul <- select(tre_sagres_jul,-DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
ugestora <- read.csv('codigo_ugestora.csv', encoding = "UTF-8")
contrato <- read.csv('contratos.csv', encoding = "UTF-8")
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
n.dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
colnames(n.dispensas)[3] <- "n.dispensas"
tre_sagres <- merge(tre_sagres, n.dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
tre_sagres$n.dispensas <- with(tre_sagres, ifelse(is.na(n.dispensas),0,n.dispensas))
write.table(tre_sagres, "tre_sagres_unificadoBase.csv", sep=";", row.names = F, quote = F)
codigo_ugestora <- read.csv("codigo_ugestora.csv")
aditivos = read.csv("aditivos.csv")
contratos = read.csv("contratos.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="Latin1")
# ADITIVOS
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
set_features$dt_Ano <- with(set_features, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(set_features, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = sum(quantidadeAditivoPorGestao))
set_features = unique(set_features)
# Dispenças de Licitações
dispencaLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 6 | tp_Licitacao == 7)
dispencaLicitacaoPorGestao = group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = length(cd_UGestora))
dispencaLicitacaoPorGestao <- select(dispencaLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeDispencaLicitacaoPorGestao)
dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
dispencaLicitacaoPorGestao$dt_Ano <- with(dispencaLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
dispencaLicitacaoPorGestao <- group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = sum(quantidadeDispencaLicitacaoPorGestao))
dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
set_features <- merge(set_features, dispencaLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
set_features[is.na(set_features)] <- 0
# Convite de Licitações
conviteLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 3)
conviteLicitacaoPorGestao = group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = length(cd_UGestora))
conviteLicitacaoPorGestao <- select(conviteLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeConviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao <- group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = sum(quantidadeConviteLicitacaoPorGestao))
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = na.omit(conviteLicitacaoPorGestao)
set_features <- merge(set_features, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
set_features[is.na(set_features)] <- 0
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
# Exportar csv
write.csv(set_features, file = "set_features.csv")
write.csv(quantidadeEleitores, file = "quantidadeEleitores.csv")
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
set_features <- read.csv('set_features.csv')
quantidadeEleitores <- read.csv('quantidadeEleitores.csv')
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangência"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
##s
tre_sagres <- unique(tre_sagres)
write.table(tre_sagres, "tre_sagres_unificado.csv", quote = F, row.names = F, sep=",")
data = read.csv("tre_sagres_unificado.csv",header=FALSE,skip=1)
features = select(data, V6,V7,V8,V9)
table(data$V5)
train_idx = createDataPartition(y=data$V5, p=.9,list=FALSE)
train = data[train_idx,]
test = data[-train_idx,]
features = select(train, V6,V7,V8,V9)
prop.table(table(train$V5))
prop.table(table(test$V5))
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$V5)
model = train(x=features,y=labels,trControl=fitControl)
prob = predict
plot(model)
test_labels = as.factor(test$V5)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
set_features$dt_Ano <- with(set_features, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(set_features, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = sum(quantidadeAditivoPorGestao))
set_features = unique(set_features)
View(set_features)
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
View(set_features)
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
set_features$dt_Ano <- with(set_features, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(set_features, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = sum(quantidadeAditivoPorGestao))
View(set_features)
set_features = unique(set_features)
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
set_features$dt_Ano <- with(set_features, unlist(lapply(dt_Ano, relabel_ano)))
set_features$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# ----------- Bibliotecas INICIO
# Para gráficos
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
#Para manipulação dos dados
if(!require(dplyr)){
install.packages("dplyr")
}
library(dplyr)
# Utilizada para criar as partições de treino e teste
if(!require(caret)){
install.packages("caret")
}
library(caret)
# Aprendizado de Máquina
if(!require(mlbench)){
install.packages("mlbench")
}
library(mlbench)
# Árvore de decisão
if(!require(C50)){
install.packages("C50")
}
library(C50)
# Random - Floresta de Classificação
if(!require(randomForest)){
install.packages("randomForest")
}
library(randomForest)
# ----------- Bibliotecas  FIM
# Endereço da pasta com dados
setwd('/Corruptometro/data/')
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
tre_sagres_jul <- read.csv('TRE_Sagres_Resp_Eleito.csv')
tre_sagres_n_jul <- read.csv('TRE_Sagres_Eleit_Idon.csv')
tre_sagres_jul$class <- "Julgados"
tre_sagres_n_jul$class <- "Não julgados"
tre_sagres_jul <- select(tre_sagres_jul,-DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
ugestora <- read.csv('codigo_ugestora.csv', encoding = "UTF-8")
contrato <- read.csv('contratos.csv', encoding = "UTF-8")
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
n.dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
colnames(n.dispensas)[3] <- "n.dispensas"
tre_sagres <- merge(tre_sagres, n.dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
tre_sagres$n.dispensas <- with(tre_sagres, ifelse(is.na(n.dispensas),0,n.dispensas))
write.table(tre_sagres, "tre_sagres_unificadoBase.csv", sep=";", row.names = F, quote = F)
codigo_ugestora <- read.csv("codigo_ugestora.csv")
aditivos = read.csv("aditivos.csv")
contratos = read.csv("contratos.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="Latin1")
set_features$dt_Ano <- with(set_features, unlist(lapply(dt_Ano, relabel_ano)))
set_features$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
View(aditivos)
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
conviteLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 3)
View(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao = group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = length(cd_UGestora))
conviteLicitacaoPorGestao <- select(conviteLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeConviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = na.omit(conviteLicitacaoPorGestao)
set_features <- merge(set_features, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
View(set_features)
set_features[is.na(set_features)] <- 0
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
View(quantidadeEleitores)
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade.2009, Quantidade.2013, Distancia.Para.Capital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="UTF-8")
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade.2009, Quantidade.2013, Distancia.Para.Capital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="Latin 2")
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade.2009, Quantidade.2013, Distancia.Para.Capital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
# Exportar csv
write.csv(set_features, file = "set_features.csv")
write.csv(quantidadeEleitores, file = "quantidadeEleitores.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="UTF-8")
quantidadeEleitores = read.csv("quantidadeEleitores.csv", header=T, sep=",", fileEncoding="UTF-8")
View(quantidadeEleitores)
quantidadeEleitores = read.csv("quantidadeEleitores.csv",  encoding = "UTF-8")
View(quantidadeEleitores)
quantidadeEleitores = read.csv("quantidadeEleitores.csv",  encoding = "UTF-8")
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade.2009, Quantidade.2013, Distancia.Para.Capital)
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade.2009 + Quantidade.2013)/2)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade2009 + Quantidade2013)/2)
# Exportar csv
write.csv(set_features, file = "set_features.csv")
write.csv(quantidadeEleitores, file = "quantidadeEleitores.csv")
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
set_features <- read.csv('set_features.csv')
quantidadeEleitores <- read.csv('quantidadeEleitores.csv')
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangência"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangência"), all.x = T)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
##s
tre_sagres <- unique(tre_sagres)
write.table(tre_sagres, "tre_sagres_unificado.csv", quote = F, row.names = F, sep=",")
data = read.csv("tre_sagres_unificado.csv",header=FALSE,skip=1)
View(data)
View(tre_sagres)
# ----------- Bibliotecas INICIO
# Para gráficos
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
#Para manipulação dos dados
if(!require(dplyr)){
install.packages("dplyr")
}
library(dplyr)
# Utilizada para criar as partições de treino e teste
if(!require(caret)){
install.packages("caret")
}
library(caret)
# Aprendizado de Máquina
if(!require(mlbench)){
install.packages("mlbench")
}
library(mlbench)
# Árvore de decisão
if(!require(C50)){
install.packages("C50")
}
library(C50)
# Random - Floresta de Classificação
if(!require(randomForest)){
install.packages("randomForest")
}
library(randomForest)
# ----------- Bibliotecas  FIM
# Endereço da pasta com dados
setwd('/Corruptometro/data/')
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
tre_sagres_jul <- read.csv('TRE_Sagres_Resp_Eleito.csv')
tre_sagres_n_jul <- read.csv('TRE_Sagres_Eleit_Idon.csv')
tre_sagres_jul$class <- "Julgados"
tre_sagres_n_jul$class <- "Não julgados"
tre_sagres_jul <- select(tre_sagres_jul,-DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
ugestora <- read.csv('codigo_ugestora.csv', encoding = "UTF-8")
contrato <- read.csv('contratos.csv', encoding = "UTF-8")
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
n.dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
colnames(n.dispensas)[3] <- "n.dispensas"
tre_sagres <- merge(tre_sagres, n.dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
tre_sagres$n.dispensas <- with(tre_sagres, ifelse(is.na(n.dispensas),0,n.dispensas))
write.table(tre_sagres, "tre_sagres_unificadoBase.csv", sep=";", row.names = F, quote = F)
View(tre_sagres)
codigo_ugestora <- read.csv("codigo_ugestora.csv")
aditivos = read.csv("aditivos.csv")
contratos = read.csv("contratos.csv")
codigo_ugestora <- read.csv("codigo_ugestora.csv")
aditivos = read.csv("aditivos.csv")
contratos = read.csv("contratos.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv",  encoding = "UTF-8")
# ADITIVOS
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
# Dispenças de Licitações
#dispencaLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 6 | tp_Licitacao == 7)
#dispencaLicitacaoPorGestao = group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = length(cd_UGestora))
#dispencaLicitacaoPorGestao <- select(dispencaLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeDispencaLicitacaoPorGestao)
#dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
#dispencaLicitacaoPorGestao$dt_Ano <- with(dispencaLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
#dispencaLicitacaoPorGestao <- group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = sum(quantidadeDispencaLicitacaoPorGestao))
#dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
#set_features <- merge(set_features, dispencaLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
#set_features[is.na(set_features)] <- 0
# Convite de Licitações
conviteLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 3)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao = group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = length(cd_UGestora))
conviteLicitacaoPorGestao <- select(conviteLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeConviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = na.omit(conviteLicitacaoPorGestao)
set_features <- merge(set_features, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
set_features[is.na(set_features)] <- 0
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade2009 + Quantidade2013)/2)
# Exportar csv
View(set_features)
write.csv(set_features, file = "set_features.csv")
write.csv(quantidadeEleitores, file = "quantidadeEleitores.csv")
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
set_features <- read.csv('set_features.csv')
quantidadeEleitores <- read.csv('quantidadeEleitores.csv')
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
View(set_features)
View(quantidadeEleitores)
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
set_features <- read.csv('set_features.csv')
quantidadeEleitores <- read.csv('quantidadeEleitores.csv')
View(set_features)
write.csv(set_features, file = "set_features.csv",  sep=";", row.names = F, quote = F)
codigo_ugestora <- read.csv("codigo_ugestora.csv")
aditivos = read.csv("aditivos.csv")
contratos = read.csv("contratos.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv",  encoding = "UTF-8")
# ADITIVOS
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
# Dispenças de Licitações
#dispencaLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 6 | tp_Licitacao == 7)
#dispencaLicitacaoPorGestao = group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = length(cd_UGestora))
#dispencaLicitacaoPorGestao <- select(dispencaLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeDispencaLicitacaoPorGestao)
#dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
#dispencaLicitacaoPorGestao$dt_Ano <- with(dispencaLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
#dispencaLicitacaoPorGestao <- group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = sum(quantidadeDispencaLicitacaoPorGestao))
#dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
#set_features <- merge(set_features, dispencaLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
codigo_ugestora <- read.csv("codigo_ugestora.csv")
aditivos = read.csv("aditivos.csv")
contratos = read.csv("contratos.csv")
quantidadeEleitores = read.csv("quantidadeEleitores.csv",  encoding = "UTF-8")
# ADITIVOS
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
set_features <- group_by(aditivos, cd_UGestora, dt_Ano) %>% mutate(quantidadeAditivoPorGestao = length(vl_Aditivo))
set_features <- select(set_features, dt_Ano, cd_UGestora, quantidadeAditivoPorGestao)
set_features = unique(set_features)
View(set_features)
# Dispenças de Licitações
#dispencaLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 6 | tp_Licitacao == 7)
#dispencaLicitacaoPorGestao = group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = length(cd_UGestora))
#dispencaLicitacaoPorGestao <- select(dispencaLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeDispencaLicitacaoPorGestao)
#dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
#dispencaLicitacaoPorGestao$dt_Ano <- with(dispencaLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
#dispencaLicitacaoPorGestao <- group_by(dispencaLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeDispencaLicitacaoPorGestao = sum(quantidadeDispencaLicitacaoPorGestao))
#dispencaLicitacaoPorGestao = unique(dispencaLicitacaoPorGestao)
#set_features <- merge(set_features, dispencaLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
#set_features[is.na(set_features)] <- 0
# Convite de Licitações
conviteLicitacaoPorGestao <- filter(contratos, tp_Licitacao == 3)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao = group_by(conviteLicitacaoPorGestao, cd_UGestora, dt_Ano) %>% mutate(quantidadeConviteLicitacaoPorGestao = length(cd_UGestora))
conviteLicitacaoPorGestao <- select(conviteLicitacaoPorGestao, dt_Ano, cd_UGestora, quantidadeConviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = unique(conviteLicitacaoPorGestao)
conviteLicitacaoPorGestao = na.omit(conviteLicitacaoPorGestao)
set_features <- merge(set_features, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
set_features[is.na(set_features)] <- 0
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(media = (Quantidade2009 + Quantidade2013)/2)
View(set_features)
# Exportar csv
write.csv(set_features, file = "set_features.csv",  sep=";", row.names = F, quote = F)
write.csv(set_features, file = "set_features.csv", row.names = F, quote = F)
write.csv(quantidadeEleitores, file = "quantidadeEleitores.csv", row.names = F, quote = F)
tre_sagres <- read.csv('tre_sagres_unificadoBase.csv', header=T, sep=";", fileEncoding="UTF-8")
set_features <- read.csv('set_features.csv')
quantidadeEleitores <- read.csv('quantidadeEleitores.csv')
View(set_features)
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
tre_sagres <- unique(tre_sagres)
View(tre_sagres)
write.table(tre_sagres, "tre_sagres_unificado.csv", quote = F, row.names = F, sep=",")
data = read.csv("tre_sagres_unificado.csv",header=FALSE,skip=1)
features = select(data, V6,V7,V8)
table(data$V5)
train_idx = createDataPartition(y=data$V5, p=.9,list=FALSE)
train = data[train_idx,]
test = data[-train_idx,]
features = select(train, V6,V7,V8)
prop.table(table(train$V5))
prop.table(table(test$V5))
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$V5)
model = train(x=features,y=labels,trControl=fitControl)
prob = predict
plot(model)
test_labels = as.factor(test$V5)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
