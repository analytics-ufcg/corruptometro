tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
tre_sagres <- unique(tre_sagres)
tre_sagres <- merge(tre_sagres, candidadosEleicao2016, by = c("de_Ugestora","ELEITO"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- FALSE
# seleciona conjunto de contrados realizados após o ano de 2008 com licitações do tipo "Dispensa de valor" ou "Dispensa por outro motivo"
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
# Aplica a função "relabel_ano" as licitações selecionadas
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona a coluna "nu_Dispesas" a base
nu_Dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
colnames(nu_Dispensas)[3] <- "nu_Dispensas"
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
tre_sagres$nu_Dispensas <- with(tre_sagres, ifelse(is.na(nu_Dispensas),0,nu_Dispensas))
# Aplica a funcao "relabel_ano" ao conjunto "Aditivos"
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona os atributos de aditivos
aditivo_De_Prazo <- filter(aditivos, vl_Aditivo == "0,0000")
aditivo_De_Prazo <- group_by(aditivo_De_Prazo, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Prazo = length(nu_Aditivo))
aditivo_De_Prazo <- select(aditivo_De_Prazo, cd_UGestora, dt_Ano ,nu_Aditivo_Prazo)
aditivo_De_Devolucao = filter(aditivos, regexpr('-', vl_Aditivo) > 0)
aditivo_De_Devolucao <- group_by(aditivo_De_Devolucao, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Devolucao = length(nu_Aditivo))
aditivo_De_Devolucao <- select(aditivo_De_Devolucao, cd_UGestora, dt_Ano, nu_Aditivo_Devolucao)
aditivo_De_Valor = filter(aditivos, regexpr('-', vl_Aditivo) < 0)
aditivo_De_Valor <- group_by(aditivo_De_Valor, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Valor = length(nu_Aditivo))
aditivo_De_Valor <- select(aditivo_De_Valor, cd_UGestora, dt_Ano, nu_Aditivo_Valor)
nu_Aditivos_Totais <- merge(aditivo_De_Prazo, aditivo_De_Devolucao, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais <- merge(nu_Aditivos_Totais, aditivo_De_Valor, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais[is.na(nu_Aditivos_Totais)] <- 0
nu_Aditivos_Totais$nu_Aditivos_Totais <- with(nu_Aditivos_Totais, nu_Aditivo_Prazo + nu_Aditivo_Devolucao + nu_Aditivo_Valor)
nu_Aditivos_Totais <- unique(nu_Aditivos_Totais)
tre_sagres <- merge(tre_sagres, nu_Aditivos_Totais, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
# Adiciona convite de Licita??es
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, conviteLicitacaoPorGestao, length)
tre_sagres <- merge(tre_sagres, conviteLicitacaoPorGestao, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Adiciona Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(Media = (Quantidade2009 + Quantidade2013)/2)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
tre_sagres <- unique(tre_sagres)
# write.table(tre_sagres, "../../data/tre_sagres_unificado.csv", quote = F, row.names = F, sep=",", fileEncoding = "UTF-8")
View(tre_sagres)
# Fun??o para modificar o ano.
# Gest?es entre 2009 e 2012 tem o ano modificado para 2009
# Gest?es entre 2013 e 2016 tem o ano modificado para 2013
source("imports.R")
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
## tre_sagres_jul jestores jugados
tre_sagres_jul <- read.csv('../../data/TRE_Sagres_Resp_Eleito.csv', encoding = "UTF-8")
## tre_sagres_n_jul jestores Não jugados
tre_sagres_n_jul <- read.csv('../../data/TRE_Sagres_Eleit_Idon.csv', encoding = "UTF-8")
## dados referentes a unidade gestora
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
## contratos realizados pelas unidades gestoras
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
## Conjundo de aditivos solicitados pelas unidades gestoras
aditivos <- read.csv("../../data/aditivos.csv", encoding = "UTF-8")
## Sum?rio eleitoral das unidades gestoras
quantidadeEleitores = read.csv("../../data/quantidadeEleitores.csv", encoding = "UTF-8")
candidadosEleicao2016 = read.csv("../../data/Candidatos_eleicao_2016.csv", encoding = "UTF-8")
candidadosEleicao2016$Candidato2016 <- TRUE
# Adiciona coluna Classe
tre_sagres_jul$Classe <- "Julgado"
tre_sagres_n_jul$Classe <- "Nao julgado"
tre_sagres_jul <- select(tre_sagres_jul, -DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
tre_sagres <- unique(tre_sagres)
tre_sagres <- merge(tre_sagres, candidadosEleicao2016, by = c("de_Ugestora","ELEITO"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- FALSE
# seleciona conjunto de contrados realizados após o ano de 2008 com licitações do tipo "Dispensa de valor" ou "Dispensa por outro motivo"
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
# Aplica a função "relabel_ano" as licitações selecionadas
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona a coluna "nu_Dispesas" a base
nu_Dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
colnames(nu_Dispensas)[3] <- "nu_Dispensas"
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
tre_sagres$nu_Dispensas <- with(tre_sagres, ifelse(is.na(nu_Dispensas),0,nu_Dispensas))
# Aplica a funcao "relabel_ano" ao conjunto "Aditivos"
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona os atributos de aditivos
aditivo_De_Prazo <- filter(aditivos, vl_Aditivo == "0,0000")
aditivo_De_Prazo <- group_by(aditivo_De_Prazo, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Prazo = length(nu_Aditivo))
aditivo_De_Prazo <- select(aditivo_De_Prazo, cd_UGestora, dt_Ano ,nu_Aditivo_Prazo)
aditivo_De_Devolucao = filter(aditivos, regexpr('-', vl_Aditivo) > 0)
aditivo_De_Devolucao <- group_by(aditivo_De_Devolucao, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Devolucao = length(nu_Aditivo))
aditivo_De_Devolucao <- select(aditivo_De_Devolucao, cd_UGestora, dt_Ano, nu_Aditivo_Devolucao)
aditivo_De_Valor = filter(aditivos, regexpr('-', vl_Aditivo) < 0)
aditivo_De_Valor <- group_by(aditivo_De_Valor, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Valor = length(nu_Aditivo))
aditivo_De_Valor <- select(aditivo_De_Valor, cd_UGestora, dt_Ano, nu_Aditivo_Valor)
nu_Aditivos_Totais <- merge(aditivo_De_Prazo, aditivo_De_Devolucao, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais <- merge(nu_Aditivos_Totais, aditivo_De_Valor, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais[is.na(nu_Aditivos_Totais)] <- 0
nu_Aditivos_Totais$nu_Aditivos_Totais <- with(nu_Aditivos_Totais, nu_Aditivo_Prazo + nu_Aditivo_Devolucao + nu_Aditivo_Valor)
nu_Aditivos_Totais <- unique(nu_Aditivos_Totais)
tre_sagres <- merge(tre_sagres, nu_Aditivos_Totais, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
# Adiciona convite de Licita??es
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, conviteLicitacaoPorGestao, length)
tre_sagres <- merge(tre_sagres, conviteLicitacaoPorGestao, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Adiciona Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(Media = (Quantidade2009 + Quantidade2013)/2)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
tre_sagres <- unique(tre_sagres)
write.table(tre_sagres, "../../data/tre_sagres_unificado.csv", quote = F, row.names = F, sep=",", fileEncoding = "UTF-8")
# Fun??o para modificar o ano.
# Gest?es entre 2009 e 2012 tem o ano modificado para 2009
# Gest?es entre 2013 e 2016 tem o ano modificado para 2013
source("imports.R")
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
## tre_sagres_jul jestores jugados
tre_sagres_jul <- read.csv('../../data/TRE_Sagres_Resp_Eleito.csv', encoding = "UTF-8")
## tre_sagres_n_jul jestores NÃ£o jugados
tre_sagres_n_jul <- read.csv('../../data/TRE_Sagres_Eleit_Idon.csv', encoding = "UTF-8")
## dados referentes a unidade gestora
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
## contratos realizados pelas unidades gestoras
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
# Fun??o para modificar o ano.
# Gest?es entre 2009 e 2012 tem o ano modificado para 2009
# Gest?es entre 2013 e 2016 tem o ano modificado para 2013
source("imports.R")
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
## tre_sagres_jul jestores jugados
tre_sagres_jul <- read.csv('../../data/TRE_Sagres_Resp_Eleito.csv', encoding = "UTF-8")
## tre_sagres_n_jul jestores NÃ£o jugados
tre_sagres_n_jul <- read.csv('../../data/TRE_Sagres_Eleit_Idon.csv', encoding = "UTF-8")
## dados referentes a unidade gestora
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
## contratos realizados pelas unidades gestoras
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
## Conjundo de aditivos solicitados pelas unidades gestoras
aditivos <- read.csv("../../data/aditivos.csv", encoding = "UTF-8")
## Sum?rio eleitoral das unidades gestoras
quantidadeEleitores = read.csv("../../data/quantidadeEleitores.csv", encoding = "UTF-8")
candidadosEleicao2016 = read.csv("../../data/Candidatos_eleicao_2016.csv", encoding = "UTF-8")
candidadosEleicao2016$Candidato2016 <- TRUE
# Adiciona coluna Classe
tre_sagres_jul$Classe <- "Julgado"
tre_sagres_n_jul$Classe <- "Nao julgado"
tre_sagres_jul <- select(tre_sagres_jul, -DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
tre_sagres <- unique(tre_sagres)
tre_sagres <- merge(tre_sagres, candidadosEleicao2016, by = c("de_Ugestora","ELEITO"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- FALSE
# seleciona conjunto de contrados realizados apÃ³s o ano de 2008 com licitaÃ§Ãµes do tipo "Dispensa de valor" ou "Dispensa por outro motivo"
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
# Aplica a funÃ§Ã£o "relabel_ano" as licitaÃ§Ãµes selecionadas
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona a coluna "nu_Dispesas" a base
nu_Dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
colnames(nu_Dispensas)[3] <- "nu_Dispensas"
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
tre_sagres$nu_Dispensas <- with(tre_sagres, ifelse(is.na(nu_Dispensas),0,nu_Dispensas))
# Aplica a funcao "relabel_ano" ao conjunto "Aditivos"
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona os atributos de aditivos
aditivo_De_Prazo <- filter(aditivos, vl_Aditivo == "0,0000")
aditivo_De_Prazo <- group_by(aditivo_De_Prazo, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Prazo = length(nu_Aditivo))
aditivo_De_Prazo <- select(aditivo_De_Prazo, cd_UGestora, dt_Ano ,nu_Aditivo_Prazo)
aditivo_De_Devolucao = filter(aditivos, regexpr('-', vl_Aditivo) > 0)
aditivo_De_Devolucao <- group_by(aditivo_De_Devolucao, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Devolucao = length(nu_Aditivo))
aditivo_De_Devolucao <- select(aditivo_De_Devolucao, cd_UGestora, dt_Ano, nu_Aditivo_Devolucao)
aditivo_De_Valor = filter(aditivos, regexpr('-', vl_Aditivo) < 0)
aditivo_De_Valor <- group_by(aditivo_De_Valor, cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Valor = length(nu_Aditivo))
aditivo_De_Valor <- select(aditivo_De_Valor, cd_UGestora, dt_Ano, nu_Aditivo_Valor)
nu_Aditivos_Totais <- merge(aditivo_De_Prazo, aditivo_De_Devolucao, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais <- merge(nu_Aditivos_Totais, aditivo_De_Valor, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais[is.na(nu_Aditivos_Totais)] <- 0
nu_Aditivos_Totais$nu_Aditivos_Totais <- with(nu_Aditivos_Totais, nu_Aditivo_Prazo + nu_Aditivo_Devolucao + nu_Aditivo_Valor)
nu_Aditivos_Totais <- unique(nu_Aditivos_Totais)
tre_sagres <- merge(tre_sagres, nu_Aditivos_Totais, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
# Adiciona convite de Licita??es
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3)
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
conviteLicitacaoPorGestao <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, conviteLicitacaoPorGestao, length)
tre_sagres <- merge(tre_sagres, conviteLicitacaoPorGestao, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Adiciona Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(Media = (Quantidade2009 + Quantidade2013)/2)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
tre_sagres <- unique(tre_sagres)
#write.table(tre_sagres, "../../data/tre_sagres_unificado.csv", quote = F, row.names = F, sep=",", fileEncoding = "UTF-8")
View(candidadosEleicao2016)
source("imports.R")
table(tre_sagres$Classe)
train_idx = createDataPartition(y=tre_sagres$Classe, p=.9, list=FALSE)
train_idx
table(tre_sagres$Candidato2016)
train_idx = which(tre_sagres$Candidato2016)
which(tre_sagres$Candidato2016)
test_idx = which(tre_sagres$Candidato2016)
test_idx = which(tre_sagres$Candidato2016)
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
View(train)
View(test)
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
prop.table(table(train$Classe))
prop.table(table(test$Classe))
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
train = tre_sagres[-test_idx,]
test = tre_sagres[test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
test_idx1 = which(tre_sagres$Candidato2016)
test_idx2 = which(tre_sagres$Candidato2016)
test_idx3 = which(tre_sagres$Candidato2016)
test_idx4 = which(tre_sagres$Candidato2016)
test_idx1 == test_idx2
test_idx1 == test_idx2 == test_idx3 == test_idx4
(test_idx1 == test_idx2) == (test_idx3 == test_idx4)
table((test_idx1 == test_idx2) == (test_idx3 == test_idx4))
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test1 = tre_sagres[test_idx,]
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test2 = tre_sagres[test_idx,]
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test3 = tre_sagres[test_idx,]
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test4 = tre_sagres[test_idx,]
test1 == test2
table(test1 == test2)
table((test1 == test2) == (test3 == test4))
# Excutar script data.R
source("imports.R")
source("data.R")
# Importar conjunto de dados "tre_sagres_unificado.csv"
# tre_sagres = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
# Apresentar os possíveis níveis de Classe
table(tre_sagres$Classe)
# Partição de treino com x% dos dados
#train_idx = caret::createDataPartition(y=tre_sagres$Classe, p=.9, list=FALSE)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test = tre_sagres[test_idx,]
train = tre_sagres[-test_idx,]
# features do conjunto de treino
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
warnings()
?train
?trainControl
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", .mtry=sqrt(ncol(train.features)))
warnings()
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", .mtry = param$mtry)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", mtry = param$mtry)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", .mtry=2)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", .mtry=1)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", .mtry=3)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf", .mtry=4)
View(test.features)
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, get(features.names))
test.features = select(test, get(features.names))
get(features.names)
features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
features.names
a=get(features.names)
View(a)
train.features = select(train, nu_Dispensas, nu_Aditivo_Prazo, nu_Aditivo_Devolucao, nu_Aditivo_Valor, nu_Aditivos_Totais, nu_Contrato)
View(train.features)
test.features = select(test, nu_Dispensas, nu_Aditivo_Prazo, nu_Aditivo_Devolucao, nu_Aditivo_Valor, nu_Aditivos_Totais, nu_Contrato)
source("imports.R")
source("data.R")
# Importar conjunto de dados "tre_sagres_unificado.csv"
# tre_sagres = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
# Apresentar os possíveis níveis de Classe
table(tre_sagres$Classe)
# Partição de treino com x% dos dados
#train_idx = caret::createDataPartition(y=tre_sagres$Classe, p=.9, list=FALSE)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test = tre_sagres[test_idx,]
train = tre_sagres[-test_idx,]
# features do conjunto de treino
#features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, nu_Dispensas, nu_Aditivo_Prazo, nu_Aditivo_Devolucao, nu_Aditivo_Valor, nu_Aditivos_Totais, nu_Contrato)
test.features = select(test, nu_Dispensas, nu_Aditivo_Prazo, nu_Aditivo_Devolucao, nu_Aditivo_Valor, nu_Aditivos_Totais, nu_Contrato)
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
# Excutar script data.R
source("imports.R")
source("data.R")
# Importar conjunto de dados "tre_sagres_unificado.csv"
# tre_sagres = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
# Apresentar os possíveis níveis de Classe
table(tre_sagres$Classe)
# Partição de treino com x% dos dados
#train_idx = caret::createDataPartition(y=tre_sagres$Classe, p=.9, list=FALSE)
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test = tre_sagres[test_idx,]
train = tre_sagres[-test_idx,]
# features do conjunto de treino
#features.names = c("nu_Dispensas", "nu_Aditivo_Prazo", "nu_Aditivo_Devolucao", "nu_Aditivo_Valor", "nu_Aditivos_Totais", "nu_Contrato")
train.features = select(train, nu_Dispensas, nu_Aditivo_Prazo, nu_Aditivo_Devolucao, nu_Aditivo_Valor, nu_Aditivos_Totais, nu_Contrato)
test.features = select(test, nu_Dispensas, nu_Aditivo_Prazo, nu_Aditivo_Devolucao, nu_Aditivo_Valor, nu_Aditivos_Totais, nu_Contrato)
# Proporção dos conjuntos de treino e teste
prop.table(table(train$Classe))
prop.table(table(test$Classe))
#Treino do modelo
#grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=train.features, y=labels, trControl=fitControl, method="rf")
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test.features)
prob = predict(model,newdata=test.features,type = "prob")
caret::confusionMatrix(predictions, test_labels)
